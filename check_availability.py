"""
这个文件用于检验由预训练大模型生成的路由策略是否为可行解，检测模型为GPT5-high
检验办法详见prompt
"""

from generate_solution import APIClient

client = APIClient()

model = "gpt-5-high"
check_availability_prompt = """
角色：你是一名“网络流可行性核查器”。

目标：给定拓扑、初始已用容量、数据流及其路径，判断解是否可行；若可行，计算各边的分配结果与最大链路利用率 MLU；若不可行，指出违规边及原因。

输入：
	1.	节点集合与无向边集合。每条边的总容量固定为 10。
	2.	每条边的初始已用容量 UC0(e)。
	3.	数据流集合：对每个流 m，给定起点 s_m、终点 t_m、带宽 b_m，以及该流的路径 P_m（按节点或边顺序给出）。
	4.	约定：边为无向；若输入未指明边命名方式，使用“(u-v)”且按字母序或编号小的在前；单位忽略；默认路径必须为简单路径（不重复节点与边）。

规则与检查步骤：
	1.	路径合法性检查：对每个流，确认路径首节点等于 s_m、尾节点等于 t_m；路径上任意相邻节点之间在边集合中存在对应无向边；若默认要求简单路径，则不得出现节点或边重复。
	2.	逐边统计带宽分配：对每条边 e，计算分配量 alloc(e)，等于所有经过该边的流的带宽之和。
	3.	计算结束状态：对每条边 e，
UC1(e) = UC0(e) + alloc(e)
RC1(e) = 10 - UC1(e)
util(e) = UC1(e) / 10
	4.	可行性判定：若存在任一边 UC1(e) > 10 或 RC1(e) < 0，则判定不可行。需列出每条违规边、其 UC0、alloc、UC1、超额数值，以及导致分配的具体流编号。
	5.	若可行，计算最大链路利用率 MLU，为所有边的 util(e) 的最大值。
	6.	数值格式：保留两到三位小数（例如 0.50 或 0.500）；边名与数值之间使用逗号与等号，便于机器解析。
	7.	边的输出顺序：按边名的字母序或编号升序输出（例如 (A-B) 在 (A-C) 前）。

输出要求（仅输出结果，不要解释过程）：
	1.	对于每条边输出一行：边名, alloc=分配量, UC1=结束已用, RC1=结束剩余, util=利用率
示例（示意格式）：(A-B), alloc=2, UC1=7, RC1=3, util=0.70
	2.	最后一行输出：MLU=数值
	3.	若不可行，在最前面先输出一行：INFEASIBLE
	4.  若可行，在最前面先输出一行：FEASIBLE
随后逐行列出违规边：边名, UC0=…, alloc=…, UC1=…, overflow=超额数值, caused_by=流编号列表
之后仍需输出已计算得到的每条边的 alloc/UC1/RC1/util（若已能计算），不再输出 MLU。
"""

results = """
模型: gpt-5
生成时间: 2025-09-24 17:12:10
==================================================

数据流初始定义
- 源=1, 宿=18, 带宽=5, 每条边总容量TC=10
- 选路与分配方式：单路径不分裂；路径 1-19-5-2-9-10-11-12-15-18，沿路径每条边分配5

每条边的初始状态、带宽分配、结束状态（格式：u-v: init UC,RC | alloc | final UC,RC）
- 0-6: 2,8 | 0 | 2,8
- 0-9: 1,9 | 0 | 1,9
- 0-11: 1,9 | 0 | 1,9
- 0-14: 4,6 | 0 | 4,6
- 1-5: 5,5 | 0 | 5,5
- 1-6: 4,6 | 0 | 4,6
- 1-17: 4,6 | 0 | 4,6
- 1-19: 2,8 | 5 | 7,3
- 2-5: 2,8 | 5 | 7,3
- 2-9: 2,8 | 5 | 7,3
- 2-16: 5,5 | 0 | 5,5
- 3-10: 4,6 | 0 | 4,6
- 4-6: 1,9 | 0 | 1,9
- 4-9: 1,9 | 0 | 1,9
- 4-11: 3,7 | 0 | 3,7
- 4-12: 5,5 | 0 | 5,5
- 5-6: 5,5 | 0 | 5,5
- 5-13: 1,9 | 0 | 1,9
- 5-19: 3,7 | 5 | 8,2
- 6-7: 4,6 | 0 | 4,6
- 6-11: 1,9 | 0 | 1,9
- 6-19: 4,6 | 0 | 4,6
- 7-19: 1,9 | 0 | 1,9
- 8-17: 2,8 | 0 | 2,8
- 8-18: 5,5 | 0 | 5,5
- 9-10: 1,9 | 5 | 6,4
- 9-13: 3,7 | 0 | 3,7
- 9-18: 4,6 | 0 | 4,6
- 10-11: 1,9 | 5 | 6,4
- 10-19: 4,6 | 0 | 4,6
- 11-12: 3,7 | 5 | 8,2
- 11-17: 2,8 | 0 | 2,8
- 12-13: 5,5 | 0 | 5,5
- 12-15: 3,7 | 5 | 8,2
- 13-15: 5,5 | 0 | 5,5
- 13-18: 5,5 | 0 | 5,5
- 14-16: 5,5 | 0 | 5,5
- 15-18: 2,8 | 5 | 7,3
- 16-17: 1,9 | 0 | 1,9

每条边的带宽分配
- 分配为5的边：1-19, 5-19, 2-5, 2-9, 9-10, 10-11, 11-12, 12-15, 15-18
- 其他边分配为0

最终MLU
- MLU = 0.8
"""

prompt = check_availability_prompt + results
response = client.simple_chat(prompt, model)
print(response)
